────────────────────────────────────────────────────────────────────
📁 Terminal Test Cases & Functional Checks (Validated)
Author: Khaylub Thompson-Calvin
────────────────────────────────────────────────────────────────────

Test Case 1: Navigate to Project Directory
 Verifies your local setup and folder organization match your Agile sprint repo
cd "C:\Users\Admin\OneDrive\Desktop\School Computer Inforrmation Systems\CIS234A_Real_World_Programming\Calendar_Weeks\Real World Programming Team Project"
 Check: You're now in your main project folder where app.py, docs, src, and tests exist.

Test Case 2: Activate Virtual Environment
 Confirms your isolated Python environment is working
.\venv\Scripts\Activate
 Check: Terminal prompt should change to show you're inside (venv)

Test Case 3: Install Requirements
Ensures all necessary libraries are installed and Flask is ready to launch
pip install -r requirements.txt
Check: Flask, flask_pymongo, dnspython

Test Case 4: Run Flask App
python app.py
Check: * Running on http://localhost:3000/

Test Case 5: Registration (JSON POST)
curl -X POST http://localhost:3000/register -H "Content-Type: application/json" 
-d "{"name": "John Doe", "username": "johnd", "email": "john@example.com", "password": "pass123", "confirm_password": "pass123"}"
Response: {"message": "Registration successful"}

Test Case 6: Login (Valid and Invalid)
curl -X POST http://localhost:3000/login -H "Content-Type: application/json" 
-d "{"email": "john@example.com", "password": "pass123"}"
Response: {"message": "Login successful"}
Wrong password: {"error": "Invalid credentials"}

Test Case 7: Duplicate User Prevention
curl -X POST http://localhost:3000/register -H "Content-Type: application/json" 
-d "{"name": "John Doe", "username": "johnd", "email": "john@example.com", "password": "pass123", "confirm_password": "pass123"}"
Response: {"error": "Email or username already exists"}

Test Case 8: Notification Route (Blueprint GET)
curl http://localhost:3000/notifications/test
Response: {"message": "Notifications module is working"}

Test Case 9: HTML Form Rendering
Open in browser:
- http://localhost:3000/register
- http://localhost:3000/login
Fields appear, pages load without error

Test Case 10: PowerShell Native (Invoke-RestMethod)
Invoke-RestMethod -Uri "http://localhost:3000/login" -Method Post -Body @{
    email = "john@example.com"
    password = "pass123"
} -ContentType "application/json"
Response: {"message": "Login successful"}

Test Case 11: Hashed Passwords
Password stored in MongoDB begins with $pbkdf2-sha256$ → Confirmed hashing working

────────────────────────────────────────────────────────────────────
